// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: street.proto
// Protobuf C++ Version: 5.28.3

#ifndef GOOGLE_PROTOBUF_INCLUDED_street_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_street_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "city.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_street_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_street_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_street_2eproto;
class Street;
struct StreetDefaultTypeInternal;
extern StreetDefaultTypeInternal _Street_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class Street final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Street) */ {
 public:
  inline Street() : Street(nullptr) {}
  ~Street() PROTOBUF_FINAL;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Street(
      ::google::protobuf::internal::ConstantInitialized);

  inline Street(const Street& from) : Street(nullptr, from) {}
  inline Street(Street&& from) noexcept
      : Street(nullptr, std::move(from)) {}
  inline Street& operator=(const Street& from) {
    CopyFrom(from);
    return *this;
  }
  inline Street& operator=(Street&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Street& default_instance() {
    return *internal_default_instance();
  }
  static inline const Street* internal_default_instance() {
    return reinterpret_cast<const Street*>(
        &_Street_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Street& a, Street& b) { a.Swap(&b); }
  inline void Swap(Street* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Street* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Street* New(::google::protobuf::Arena* arena = nullptr) const PROTOBUF_FINAL {
    return ::google::protobuf::Message::DefaultConstruct<Street>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Street& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Street& from) { Street::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Street* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "Street"; }

 protected:
  explicit Street(::google::protobuf::Arena* arena);
  Street(::google::protobuf::Arena* arena, const Street& from);
  Street(::google::protobuf::Arena* arena, Street&& from) noexcept
      : Street(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const PROTOBUF_FINAL;
  static const ::google::protobuf::Message::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStreetNameFieldNumber = 1,
    kCityFieldNumber = 2,
  };
  // string streetName = 1;
  void clear_streetname() ;
  const std::string& streetname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_streetname(Arg_&& arg, Args_... args);
  std::string* mutable_streetname();
  PROTOBUF_NODISCARD std::string* release_streetname();
  void set_allocated_streetname(std::string* value);

  private:
  const std::string& _internal_streetname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_streetname(
      const std::string& value);
  std::string* _internal_mutable_streetname();

  public:
  // .City city = 2;
  bool has_city() const;
  void clear_city() ;
  const ::City& city() const;
  PROTOBUF_NODISCARD ::City* release_city();
  ::City* mutable_city();
  void set_allocated_city(::City* value);
  void unsafe_arena_set_allocated_city(::City* value);
  ::City* unsafe_arena_release_city();

  private:
  const ::City& _internal_city() const;
  ::City* _internal_mutable_city();

  public:
  // @@protoc_insertion_point(class_scope:Street)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      25, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Street_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Street& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr streetname_;
    ::City* city_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_street_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Street

// string streetName = 1;
inline void Street::clear_streetname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.streetname_.ClearToEmpty();
}
inline const std::string& Street::streetname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Street.streetName)
  return _internal_streetname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Street::set_streetname(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.streetname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Street.streetName)
}
inline std::string* Street::mutable_streetname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_streetname();
  // @@protoc_insertion_point(field_mutable:Street.streetName)
  return _s;
}
inline const std::string& Street::_internal_streetname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.streetname_.Get();
}
inline void Street::_internal_set_streetname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.streetname_.Set(value, GetArena());
}
inline std::string* Street::_internal_mutable_streetname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.streetname_.Mutable( GetArena());
}
inline std::string* Street::release_streetname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Street.streetName)
  return _impl_.streetname_.Release();
}
inline void Street::set_allocated_streetname(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.streetname_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.streetname_.IsDefault()) {
          _impl_.streetname_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Street.streetName)
}

// .City city = 2;
inline bool Street::has_city() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.city_ != nullptr);
  return value;
}
inline const ::City& Street::_internal_city() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::City* p = _impl_.city_;
  return p != nullptr ? *p : reinterpret_cast<const ::City&>(::_City_default_instance_);
}
inline const ::City& Street::city() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Street.city)
  return _internal_city();
}
inline void Street::unsafe_arena_set_allocated_city(::City* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.city_);
  }
  _impl_.city_ = reinterpret_cast<::City*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Street.city)
}
inline ::City* Street::release_city() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::City* released = _impl_.city_;
  _impl_.city_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::City* Street::unsafe_arena_release_city() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Street.city)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::City* temp = _impl_.city_;
  _impl_.city_ = nullptr;
  return temp;
}
inline ::City* Street::_internal_mutable_city() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.city_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::City>(GetArena());
    _impl_.city_ = reinterpret_cast<::City*>(p);
  }
  return _impl_.city_;
}
inline ::City* Street::mutable_city() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::City* _msg = _internal_mutable_city();
  // @@protoc_insertion_point(field_mutable:Street.city)
  return _msg;
}
inline void Street::set_allocated_city(::City* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.city_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.city_ = reinterpret_cast<::City*>(value);
  // @@protoc_insertion_point(field_set_allocated:Street.city)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_street_2eproto_2epb_2eh
